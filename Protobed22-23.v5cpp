{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor leftFlywheelMotor = motor(PORT1, ratio6_1, false);\n\nmotor rightFlywheelMotor = motor(PORT2, ratio6_1, true);\n\nrotation leftFlywheelEncoder = rotation(PORT10, false);\n\nrotation rightFlywheelEncoder = rotation(PORT11, true);\n\ncontroller Controller1 = controller(primary);\ndigital_out pPusher = digital_out(Brain.ThreeWirePort.A);\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n\n\n\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n/*----------------------------------------------------------------------------*/\n/*                                                                            */\n/*    Module:       main.cpp                                                  */\n/*    Author:       {author}                                                  */\n/*    Created:      {date}                                                    */\n/*    Description:  V5 project                                                */\n/*                                                                            */\n/*----------------------------------------------------------------------------*/\n\n#include \"vex.h\"\n#include <iostream> \n\nint leftFlywheelRPM = 600; //Defines the Inital and Fastest Speed of the Left Flywheel Motor\nint rightFlywheelRPM = 600; //Defines the Inital and Fastest Speed of the Left Flywheel Motor\nint x = 0; // Defines the Row of the Array that will be Printed to\nint timePassed = 0; //Defines the time passed in milliseconds, Counts up by ten each time RPMValue Runs\nint RPMValues[1000000][3]; //Defines the RPMValues array at a larger than neccesary size\n\nusing namespace vex;\n\nvoid RPMValue(){\n  int trueLeftFlywheelRPM = leftFlywheelEncoder.velocity(rpm); //Reads the speed of the left flywheel at the axle of the Flywheel\n  int trueRightFlywheelSpeed = rightFlywheelEncoder.velocity(rpm); //Reads the speed of the right flywheel at the axle of the Flywheel\n  RPMValues [x][0] = timePassed; //Writes the time passed to the first column of the array\n  RPMValues [x][1] = trueLeftFlywheelRPM; //Writes the left flywheel speed to the second column of the array\n  RPMValues [x][2] = trueRightFlywheelSpeed; // Writes the right flywheel speed to the third column of the array\n  x++; //moves to the next row of the array\n  timePassed += 10; //adds ten to the time passed variable\n  wait(10,msec); // waits ten milliseconds before running the function again\n}\n\nint main() {\nwhile (true){\n  if(Controller1.ButtonY.pressing()){ //Fires the pnuematic Pusher when Y is pressed on the Controller\n    pPusher.set(true);\n    wait(25,msec);\n    pPusher.set(false);\n  }\n  if(Controller1.ButtonA.pressing()){ //Turns on the flywheels when A is pressed on the Controller\n    leftFlywheelMotor.setVelocity(leftFlywheelRPM, rpm);\n    rightFlywheelMotor.setVelocity(rightFlywheelRPM, rpm);\n    leftFlywheelMotor.spin(forward);\n    rightFlywheelMotor.spin(forward);\n  }\n  if(Controller1.ButtonB.pressing()){ //Turns off the flywheels when B is pressed on the Controller\n    leftFlywheelMotor.stop();\n    rightFlywheelMotor.stop();\n  }\n  if(Controller1.ButtonL1.pressing()){ //Increases the left Flywheel by 50 RPM when L1 is pressed on the controller\n    if(leftFlywheelRPM < 600){\n      leftFlywheelRPM += 50;\n    }\n    leftFlywheelMotor.setVelocity(leftFlywheelRPM, rpm);\n  }\n  if(Controller1.ButtonL2.pressing()){ //Decreases the left Flywheel by 50 when L2 is pressed on the Controller\n  if(leftFlywheelRPM >= 0){\n      leftFlywheelRPM -= 50;\n    }\n    leftFlywheelMotor.setVelocity(leftFlywheelRPM,rpm);\n}\nif(Controller1.ButtonR1.pressing()){ //Increases the Right Flywheel speed by 50 RPM when R1 is pressed on the controller\n    if(rightFlywheelRPM < 600){\n      rightFlywheelRPM += 50;\n    }\n    rightFlywheelMotor.setVelocity(rightFlywheelRPM, rpm);\n  }\n  if(Controller1.ButtonR2.pressing()){ //Decreases the Right Flywheel speed by 50 RPMs when R2 is pressed\n  if(rightFlywheelRPM >= 0){\n      rightFlywheelRPM -= 50;\n    }\n    rightFlywheelMotor.setVelocity(rightFlywheelRPM,rpm);\n}\nController1.Screen.print(\"Left Flywheel Speed: \"); //Defines what value is shown\nController1.Screen.print(leftFlywheelEncoder.velocity(rpm)); //Prints the Speed of the Left Flywheel on the controller Screen\nController1.Screen.newLine(); // Adds a new line on the controller screen\nController1.Screen.print(\"Rights Flywheel Speed: \"); //Defines what value is shown\nController1.Screen.print(rightFlywheelEncoder.velocity(rpm)); //Prints the Speed of the Right Flywheel on the controller Screen\nRPMValue(); //Runs the RPMValue function\n}\nfor (int i=0; i <= x; ++i){ //prints the RPMValues array\n  std::cout<< RPMValues[i][0]; // Writes out Time Passed Values\n  std::cout<< RPMValues[i][1]; // Writes out Left Flywheel Speed Values\n  std::cout<< RPMValues[i][2]; // Writes out Right Flywheel Speed Values\n}\n}\n","textLanguage":"cpp","rconfig":[{"port":[1],"name":"leftFlywheelMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"}},{"port":[2],"name":"rightFlywheelMotor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio6_1"}},{"port":[10],"name":"leftFlywheelEncoder","customName":true,"deviceType":"Rotation","deviceClass":"rotation","setting":{"reversed":"false"}},{"port":[11],"name":"rightFlywheelEncoder","customName":true,"deviceType":"Rotation","deviceClass":"rotation","setting":{"reversed":"true"}},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"}},{"port":[1],"name":"pPusher","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220215.18.00.00","appVersion":"2.3.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}