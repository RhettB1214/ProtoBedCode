#pragma region VEXcode Generated Robot Configuration
// Make sure all required headers are included.
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <math.h>
#include <string.h>


#include "vex.h"

using namespace vex;

// Brain should be defined by default
brain Brain;


// START V5 MACROS
#define waitUntil(condition)                                                   \
  do {                                                                         \
    wait(5, msec);                                                             \
  } while (!(condition))

#define repeat(iterations)                                                     \
  for (int iterator = 0; iterator < iterations; iterator++)
// END V5 MACROS


// Robot configuration code.
motor leftFlywheelMotor = motor(PORT1, ratio6_1, false);

motor rightFlywheelMotor = motor(PORT2, ratio6_1, true);

rotation leftFlywheelEncoder = rotation(PORT10, false);

rotation rightFlywheelEncoder = rotation(PORT11, true);

controller Controller1 = controller(primary);
digital_out pPusher = digital_out(Brain.ThreeWirePort.A);

// define variable for remote controller enable/disable
bool RemoteControlCodeEnabled = true;




#pragma endregion VEXcode Generated Robot Configuration

/*----------------------------------------------------------------------------*/
/*                                                                            */
/*    Module:       main.cpp                                                  */
/*    Author:       {author}                                                  */
/*    Created:      {date}                                                    */
/*    Description:  V5 project                                                */
/*                                                                            */
/*----------------------------------------------------------------------------*/

#include "vex.h"
#include <iostream> 

int leftFlywheelRPM = 600; //Defines the Inital and Fastest Speed of the Left Flywheel Motor
int rightFlywheelRPM = 600; //Defines the Inital and Fastest Speed of the Left Flywheel Motor
int x = 0; // Defines the Row of the Array that will be Printed to
int timePassed = 0; //Defines the time passed in milliseconds, Counts up by ten each time RPMValue Runs
int RPMValues[1000000][3]; //Defines the RPMValues array at a larger than neccesary size

using namespace vex;

void RPMValue(){
  int trueLeftFlywheelRPM = leftFlywheelEncoder.velocity(rpm); //Reads the speed of the left flywheel at the axle of the Flywheel
  int trueRightFlywheelSpeed = rightFlywheelEncoder.velocity(rpm); //Reads the speed of the right flywheel at the axle of the Flywheel
  RPMValues [x][0] = timePassed; //Writes the time passed to the first column of the array
  RPMValues [x][1] = trueLeftFlywheelRPM; //Writes the left flywheel speed to the second column of the array
  RPMValues [x][2] = trueRightFlywheelSpeed; // Writes the right flywheel speed to the third column of the array
  x++; //moves to the next row of the array
  timePassed += 10; //adds ten to the time passed variable
  wait(10,msec); // waits ten milliseconds before running the function again
}

int main() {
while (true){
  if(Controller1.ButtonY.pressing()){ //Fires the pnuematic Pusher when Y is pressed on the Controller
    pPusher.set(true);
    wait(25,msec);
    pPusher.set(false);
  }
  if(Controller1.ButtonA.pressing()){ //Turns on the flywheels when A is pressed on the Controller
    leftFlywheelMotor.setVelocity(leftFlywheelRPM, rpm);
    rightFlywheelMotor.setVelocity(rightFlywheelRPM, rpm);
    leftFlywheelMotor.spin(forward);
    rightFlywheelMotor.spin(forward);
  }
  if(Controller1.ButtonB.pressing()){ //Turns off the flywheels when B is pressed on the Controller
    leftFlywheelMotor.stop();
    rightFlywheelMotor.stop();
  }
  if(Controller1.ButtonL1.pressing()){ //Increases the left Flywheel by 50 RPM when L1 is pressed on the controller
    if(leftFlywheelRPM < 600){
      leftFlywheelRPM += 50;
    }
    leftFlywheelMotor.setVelocity(leftFlywheelRPM, rpm);
  }
  if(Controller1.ButtonL2.pressing()){ //Decreases the left Flywheel by 50 when L2 is pressed on the Controller
  if(leftFlywheelRPM >= 0){
      leftFlywheelRPM -= 50;
    }
    leftFlywheelMotor.setVelocity(leftFlywheelRPM,rpm);
}
if(Controller1.ButtonR1.pressing()){ //Increases the Right Flywheel speed by 50 RPM when R1 is pressed on the controller
    if(rightFlywheelRPM < 600){
      rightFlywheelRPM += 50;
    }
    rightFlywheelMotor.setVelocity(rightFlywheelRPM, rpm);
  }
  if(Controller1.ButtonR2.pressing()){ //Decreases the Right Flywheel speed by 50 RPMs when R2 is pressed
  if(rightFlywheelRPM >= 0){
      rightFlywheelRPM -= 50;
    }
    rightFlywheelMotor.setVelocity(rightFlywheelRPM,rpm);
}
Controller1.Screen.print("Left Flywheel Speed: "); //Defines what value is shown
Controller1.Screen.print(leftFlywheelEncoder.velocity(rpm)); //Prints the Speed of the Left Flywheel on the controller Screen
Controller1.Screen.newLine(); // Adds a new line on the controller screen
Controller1.Screen.print("Rights Flywheel Speed: "); //Defines what value is shown
Controller1.Screen.print(rightFlywheelEncoder.velocity(rpm)); //Prints the Speed of the Right Flywheel on the controller Screen
RPMValue(); //Runs the RPMValue function
}
for (int i=0; i <= x; ++i){ //prints the RPMValues array
  std::cout<< RPMValues[i][0]; // Writes out Time Passed Values
  std::cout<< RPMValues[i][1]; // Writes out Left Flywheel Speed Values
  std::cout<< RPMValues[i][2]; // Writes out Right Flywheel Speed Values
}
}
